<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.liferay.faces.demo</groupId>
		<artifactId>com.liferay.faces.demo.portal.parent</artifactId>
		<version>3.0.2-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<artifactId>com.liferay.faces.demo.portal.showcase.portlet</artifactId>
	<packaging>war</packaging>
	<name>Portal Showcase Portlet</name>
	<description>This plugin is the Liferay Faces Portal Showcase demo portlet.</description>

	<properties>
		<filter.web.inf.properties>true</filter.web.inf.properties>
		<import.package></import.package>
		<validate.captcha.for.test>false</validate.captcha.for.test>
		<war.dependency.scope>compile</war.dependency.scope>
	</properties>

	<profiles>
		<profile>
			<id>validateCaptchaForTest</id>
			<properties>
				<validate.captcha.for.test>true</validate.captcha.for.test>
			</properties>
		</profile>
		<profile>
			<id>thin-war</id>
			<properties>
				<!--
					The package of FacesInitializer must also be explicitly imported below since the BND tools do not
					automatically add ServletContainerInitializer imports.
				-->
				<faces.servlet.container.initializer>com.liferay.faces.bridge.ext.osgi.mojarra.servlet.FacesInitializer</faces.servlet.container.initializer>
				<!-- JSP imports are necessary for Mojarra even though this webapp doesn't use JSP. -->
				<!-- EL imports are necessary for Mojarra. -->
				<!--
					The optional imports are automatically added by Liferay but are not provided, they are not necessary
					so mark them as optional to allow the portlet to deploy without them.
				-->
				<import.package>
					Import-Package: \
						!com.liferay.faces.showcase.*,\
						javax.el;version="[2.2.0,4.0.0)",\
						javax.faces.view;version="[2.2,3)",\
						javax.faces.webapp;version="[2.2,3)",\
						com.liferay.faces.bridge.ext.osgi.mojarra.servlet,\
						com.swabunga.spell.*;resolution:=optional,\
						org.apache.axis.*;resolution:=optional,\
						org.apache.bsf.*;resolution:=optional,\
						org.apache.poi.*;resolution:=optional,\
						org.apache.portals.*;resolution:=optional,\
						net.fortuna.ical4j.*;resolution:=optional,\
						*
				</import.package>
				<webapp.descriptor>web-thin-war.xml</webapp.descriptor>
				<war.dependency.scope>provided</war.dependency.scope>
			</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<mkdir dir="${project.build.outputDirectory}/META-INF/services" />
										<echo message="${faces.servlet.container.initializer}"
											  file="${project.build.outputDirectory}/META-INF/services/javax.servlet.ServletContainerInitializer" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>com.liferay.faces</groupId>
					<artifactId>com.liferay.faces.util</artifactId>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>org.glassfish</groupId>
					<artifactId>javax.faces</artifactId>
					<version>${mojarra.version}</version>
					<scope>provided</scope>
				</dependency>
			</dependencies>
		</profile>
	</profiles>

	<dependencies>
		<dependency>
			<groupId>com.liferay.portal</groupId>
			<artifactId>com.liferay.portal.kernel</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.liferay</groupId>
			<artifactId>com.liferay.journal.api</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
		</dependency>
		<dependency>
			<groupId>${faces.api.group.id}</groupId>
			<artifactId>${faces.api.artifact.id}</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>javax.servlet.jsp-api</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.portlet</groupId>
			<artifactId>portlet-api</artifactId>
		</dependency>
		<dependency>
			<groupId>com.liferay.faces</groupId>
			<artifactId>com.liferay.faces.bridge.api</artifactId>
			<scope>${war.dependency.scope}</scope>
		</dependency>
		<dependency>
			<groupId>com.liferay.faces</groupId>
			<artifactId>com.liferay.faces.bridge.impl</artifactId>
			<scope>${war.dependency.scope}</scope>
		</dependency>
		<dependency>
			<groupId>com.liferay.faces</groupId>
			<artifactId>com.liferay.faces.bridge.ext</artifactId>
			<scope>${war.dependency.scope}</scope>
		</dependency>
		<dependency>
			<groupId>com.liferay.faces</groupId>
			<artifactId>com.liferay.faces.portal</artifactId>
			<version>${project.version}</version>
			<scope>${war.dependency.scope}</scope>
		</dependency>
		<dependency>
			<groupId>com.liferay.faces.demo</groupId>
			<artifactId>com.liferay.faces.demo.showcase.common</artifactId>
			<version>${liferay.faces.showcase.version}</version>
		</dependency>
		<dependency>
			<groupId>com.liferay.faces.demo</groupId>
			<artifactId>com.liferay.faces.demo.jsf.showcase.webapp</artifactId>
			<version>${liferay.faces.showcase.version}</version>
			<type>war</type>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<scope>${war.dependency.scope}</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<scope>${war.dependency.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>jstl-impl</artifactId>
			<scope>${war.dependency.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>${war.dependency.scope}</scope>
		</dependency>
	</dependencies>

	<!-- Note that this pom.xml provides similar functionality as the maven-assembly-plugin -->
	<!-- but the "unpack" approach found below meets our needs better than the maven-assembly-plugin -->
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-install-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<dependentWarExcludes>**/h-tags*,**/component/h/**/*,**/images/jsf*.png,WEB-INF/lib/*</dependentWarExcludes>
				</configuration>
			</plugin>
		</plugins>
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.java</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
				</includes>
			</resource>
		</resources>
	</build>

</project>
